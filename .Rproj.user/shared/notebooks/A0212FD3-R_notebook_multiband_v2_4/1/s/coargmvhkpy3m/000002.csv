"0","#make empty lists for each segment"
"0","rs_e_kappa_ls<-list()"
"0","rs_d_kappa_ls<-list()"
"0","rs_c_kappa_ls<-list()"
"0","rs_b_kappa_ls<- list()"
"0","rs_a_kappa_ls<- list()"
"0","#loop through each variable (noise, sc etc)"
"0","for (i in 2:(ncol(ig_tsa_rating))) {"
"0"," #define empty vectors for each segment"
"0","  vec_e <- numeric(5)"
"0","  vec_d <- numeric(5)  "
"0","  vec_c <- numeric(5)"
"0","  vec_b <- numeric(5)"
"0","  vec_a <- numeric(5)"
"0","  "
"0","  for (e in 1:5) { #fill the vector"
"0","    #define the vector for each loop"
"0","    vec_e[e] <- i^e"
"0","    vec_d[e] <- i^e"
"0","    vec_c[e] <- i^e"
"0","    vec_b[e] <- i^e"
"0","    vec_a[e] <- i^e"
"0","    rs_e_kappa<-(paste(colnames(ig_tsa_rating)[i], ""kappa_e"", sep=""_""))"
"0","    rs_d_kappa<-(paste(colnames(ig_tsa_rating)[i], ""kappa_d"", sep=""_""))"
"0","    rs_c_kappa<-(paste(colnames(ig_tsa_rating)[i], ""kappa_c"", sep=""_""))"
"0","    rs_b_kappa<-(paste(colnames(ig_tsa_rating)[i], ""kappa_b"", sep=""_""))"
"0","    rs_a_kappa<-(paste(colnames(ig_tsa_rating)[i], ""kappa_a"", sep=""_""))"
"0","  "
"0","    #calculate coens kappe for each segment at each variable"
"0","    assign(rs_e_kappa, kappa2(data.frame(ig_tsa_rating[1:98,i], kv_tsa_rating[1:98,i]), weight=c(""squared""), sort.levels=FALSE))"
"0","    assign(rs_d_kappa, kappa2(data.frame(ig_tsa_rating[99:196,i], kv_tsa_rating[99:196,i]), weight=c(""squared""), sort.levels=FALSE))"
"0","    assign(rs_c_kappa, kappa2(data.frame(ig_tsa_rating[197:294,i], kv_tsa_rating[197:294,i]), weight=c(""squared""), sort.levels=FALSE))"
"0","    assign(rs_b_kappa, kappa2(data.frame(ig_tsa_rating[295:392,i], kv_tsa_rating[295:392,i]), weight=c(""squared""), sort.levels=FALSE))"
"0","    assign(rs_a_kappa, kappa2(data.frame(ig_tsa_rating[393:490,i], kv_tsa_rating[393:490,i]), weight=c(""squared""), sort.levels=FALSE))"
"0","  #assign z, p value and kappa values to the vector defined above for each segment"
"0","  vec_e<- c(get(rs_e_kappa)$value, get(rs_e_kappa)$statistic, get(rs_e_kappa)$p.value)"
"0","  vec_d<- c(get(rs_d_kappa)$value, get(rs_d_kappa)$statistic, get(rs_d_kappa)$p.value)"
"0","  vec_c<- c(get(rs_c_kappa)$value, get(rs_c_kappa)$statistic, get(rs_c_kappa)$p.value)"
"0","  vec_b<- c(get(rs_b_kappa)$value, get(rs_b_kappa)$statistic, get(rs_b_kappa)$p.value)"
"0","  vec_a<- c(get(rs_a_kappa)$value, get(rs_a_kappa)$statistic, get(rs_a_kappa)$p.value)"
"0","  "
"0","  }"
"0","  #populate the empty lists defined before the loop for each segment"
"0","  rs_e_kappa_ls[[i]] <- vec_e"
"0","  rs_d_kappa_ls[[i]] <- vec_d"
"0","  rs_c_kappa_ls[[i]] <- vec_c"
"0","  rs_b_kappa_ls[[i]] <- vec_b"
"0","  rs_a_kappa_ls[[i]] <- vec_a"
"0","}"
"0","#turn them to tables"
"0","  tbl_kappa_rs_e <- do.call(rbind, rs_e_kappa_ls)"
"0","  tbl_kappa_rs_d <- do.call(rbind, rs_d_kappa_ls)"
"0","  tbl_kappa_rs_c <- do.call(rbind, rs_c_kappa_ls)"
"0","  tbl_kappa_rs_b<- do.call(rbind, rs_b_kappa_ls)"
"0","  tbl_kappa_rs_a <- do.call(rbind, rs_a_kappa_ls)"
"0"," "
"0","#take only three digits of the outcomes"
"0","  options(digits=3) "
"0","  #make data frame from the kappa values of each segment at different variable"
"0","  df_kappa<- data.frame(cbind(tbl_kappa_rs_e[,1],tbl_kappa_rs_d[,1], tbl_kappa_rs_c[,1], tbl_kappa_rs_b[,1], tbl_kappa_rs_a[,1]))  "
"0","    #define rownames and colnames  "
"0","  df_kappa$rownames<- c(""Noise (1-3)"", ""Structure Clarity (3-1)"", ""Hypoperfusion Asessment (Y/N/U)"", ""Lesion Corresponds to DWI (Y/N/U)"", ""Interpretable (Y/N)"")"
"0","  df_kappa<-df_kappa[,c(6,1,2,3,4,5)]"
"0"," colnames(df_kappa)<- c(""rownames"",""full scan"", ""0.8 scan"", ""0.6 scan"", ""0.4 scan"", ""0.2 scan"")"
"0","  "
"0","   #use kable function for making the tables                     "
"0"," kable(df_kappa) %>%"
"0","  kable_styling(bootstrap_options = c(""striped"", ""hover""), full_width=F)%>%"
"0","    column_spec(1, bold=T,border_right = T)%>%"
"0","  row_spec(0, bold=T, font_size = 14)%>%"
"0","  row_spec(c(1,3,5), bold = T, color=""white"", background = ""#969696"")%>%"
"0"," row_spec(c(2,4), bold = T, background = ""white"", color=""#525252"")%>%"
"0","column_spec(1, background= ""white"", color = ""#525252"", bold=T)%>%"
"0","save_kable(file = ""kappa_tbl.html"", self_contained = T)"
"0","  "
"0","fx_kappa<-regulartable(df_kappa)"
"0","fx_kappa<-set_header_labels(fx_kappa, rownames="" "") "
"0","fx_kappa<-set_formatter_type(fx_kappa, fmt_double=""%.2f"")"
"0","fx_kappa<-italic(fx_kappa, part=""header"") "
"0","fx_kappa<-fontsize(fx_kappa, part = ""header"", size = 14)"
"0","fx_kappa<-width(fx_kappa, width = 1)"
"0","fx_kappa<- fontsize(fx_kappa, part = ""body"", size = 13)"
"0","fx_kappa<-autofit(fx_kappa)"
"0"," # set width of all columns to .75 in"
"0","fx_kappa<-align(fx_kappa, part=""all"", align=""center"")"
"0","fx_kappa<-theme_vanilla(fx_kappa)"
"0","fx_kappa<- align(fx_kappa, j=1, align=""left"")"
"0","fx_kappa<-height(fx_kappa, height = .5, part = ""header"")"
"0","fx_kappa<-height(fx_kappa, height = .4, part = ""body"")"
"0","big_b <- fp_border(color=""black"", width = 1)"
"0","fx_kappa<-vline_left( fx_kappa, border = big_b, part = ""all"" )"
"0","fx_kappa<-vline_right( fx_kappa, border = big_b, part = ""all"" )"
"0","print(fx_kappa)"
